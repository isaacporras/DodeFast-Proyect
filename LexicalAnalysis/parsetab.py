
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMA CUANDO DCL DEFAULT DESDE DIFERENTE DOSPUNTOS ENCASO ENTONS FIN FINDESDE FINENCASO FINPROC HAGA HASTA HASTAENCONTRAR ID IGUAL INICIO INICIOPROC LLAVE_DER LLAVE_IZQ MAYOR MAYORIGUAL MENOR MENORIGUAL NUMERO PARENTECIS_DER PARENTECIS_IZQ PUNTOCOMA REPITA SINO SUMA\n    Start : code\n          | empty\n    \n    code : INICIO DOSPUNTOS cuerpo FIN PUNTOCOMA procedimiento\n\n    \n        procedimiento : ID\n                     | empty\n    \n    variable : sinini PUNTOCOMA cuerpo\n            | ini PUNTOCOMA cuerpo\n            | empty empty empty\n    \n    cuerpo : variable\n            | expresion\n    \n    expresion : condicion1 expresion\n            | condicion2 expresion\n            | repita expresion\n            | hacer expresion\n            | empty empty\n\n\n    \n     repita : REPITA LLAVE_IZQ expresion LLAVE_DER HASTAENCONTRAR ID condicion sentencia PUNTOCOMA\n\n    \n    condicion2 : ENCASO ID cond2Aux2 FINENCASO PUNTOCOMA\n\n    \n    cond2Aux2 : CUANDO condicion sentencia ENTONS LLAVE_IZQ expresion LLAVE_DER SINO LLAVE_IZQ expresion LLAVE_DER\n\n    \n    condicion1 : ENCASO cond1Aux FINENCASO PUNTOCOMA\n\n    \n    cond1Aux : CUANDO ID condicion sentencia ENTONS LLAVE_IZQ expresion LLAVE_DER SINO LLAVE_IZQ expresion LLAVE_DER\n\n    \n    hacer : DESDE ID IGUAL sentencia HASTA sentencia HAGA LLAVE_IZQ expresion LLAVE_DER FINDESDE PUNTOCOMA\n\n    \n    condicion : IGUAL\n              | MAYOR\n              | MENOR\n              | DIFERENTE\n              | MAYORIGUAL\n              | MENORIGUAL\n\n    \n    sentencia : ID\n               | NUMERO\n\n    \n    ini : DCL ID IGUAL NUMERO\n\n    \n    sinini : DCL ID\n\n    \n    empty :\n    '
    
_lr_action_items = {'INICIO':([0,],[4,]),'$end':([0,1,2,3,35,47,48,49,],[-32,0,-1,-2,-32,-3,-4,-5,]),'DOSPUNTOS':([4,],[5,]),'DCL':([5,21,22,],[16,16,16,]),'FIN':([5,6,7,8,11,12,13,14,15,21,22,23,24,25,26,27,28,36,37,38,39,51,65,84,94,],[-32,20,-9,-10,-32,-32,-32,-32,-32,-32,-32,-15,-11,-32,-12,-13,-14,-6,-7,-8,-15,-19,-17,-16,-21,]),'ENCASO':([5,12,13,14,15,21,22,33,51,65,74,75,81,84,89,90,94,],[17,17,17,17,17,17,17,17,-19,-17,17,17,17,-16,17,17,-21,]),'REPITA':([5,12,13,14,15,21,22,33,51,65,74,75,81,84,89,90,94,],[18,18,18,18,18,18,18,18,-19,-17,18,18,18,-16,18,18,-21,]),'DESDE':([5,12,13,14,15,21,22,33,51,65,74,75,81,84,89,90,94,],[19,19,19,19,19,19,19,19,-19,-17,19,19,19,-16,19,19,-21,]),'PUNTOCOMA':([9,10,20,29,41,50,52,62,64,80,91,],[21,22,35,-31,51,-30,65,-28,-29,84,94,]),'LLAVE_DER':([12,13,14,15,24,25,26,27,28,33,39,45,51,65,74,75,78,79,81,84,85,89,90,92,93,94,],[-32,-32,-32,-32,-11,-32,-12,-13,-14,-32,-15,61,-19,-17,-32,-32,82,83,-32,-16,88,-32,-32,95,96,-21,]),'ID':([16,17,19,32,35,46,53,54,55,56,57,58,59,60,68,69,76,],[29,31,34,44,48,62,62,-22,-23,-24,-25,-26,-27,62,72,62,62,]),'CUANDO':([17,31,],[32,43,]),'LLAVE_IZQ':([18,70,71,77,86,87,],[33,74,75,81,89,90,]),'IGUAL':([29,34,43,44,72,],[40,46,54,54,54,]),'FINENCASO':([30,42,95,96,],[41,52,-18,-20,]),'NUMERO':([40,46,53,54,55,56,57,58,59,60,69,76,],[50,64,64,-22,-23,-24,-25,-26,-27,64,64,64,]),'MAYOR':([43,44,72,],[55,55,55,]),'MENOR':([43,44,72,],[56,56,56,]),'DIFERENTE':([43,44,72,],[57,57,57,]),'MAYORIGUAL':([43,44,72,],[58,58,58,]),'MENORIGUAL':([43,44,72,],[59,59,59,]),'HASTAENCONTRAR':([61,],[68,]),'HASTA':([62,63,64,],[-28,69,-29,]),'ENTONS':([62,64,66,67,],[-28,-29,70,71,]),'HAGA':([62,64,73,],[-28,-29,77,]),'SINO':([82,83,],[86,87,]),'FINDESDE':([88,],[91,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Start':([0,],[1,]),'code':([0,],[2,]),'empty':([0,5,11,12,13,14,15,21,22,23,25,33,35,74,75,81,89,90,],[3,11,23,25,25,25,25,11,11,38,39,25,49,25,25,25,25,25,]),'cuerpo':([5,21,22,],[6,36,37,]),'variable':([5,21,22,],[7,7,7,]),'expresion':([5,12,13,14,15,21,22,33,74,75,81,89,90,],[8,24,26,27,28,8,8,45,78,79,85,92,93,]),'sinini':([5,21,22,],[9,9,9,]),'ini':([5,21,22,],[10,10,10,]),'condicion1':([5,12,13,14,15,21,22,33,74,75,81,89,90,],[12,12,12,12,12,12,12,12,12,12,12,12,12,]),'condicion2':([5,12,13,14,15,21,22,33,74,75,81,89,90,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'repita':([5,12,13,14,15,21,22,33,74,75,81,89,90,],[14,14,14,14,14,14,14,14,14,14,14,14,14,]),'hacer':([5,12,13,14,15,21,22,33,74,75,81,89,90,],[15,15,15,15,15,15,15,15,15,15,15,15,15,]),'cond1Aux':([17,],[30,]),'cond2Aux2':([31,],[42,]),'procedimiento':([35,],[47,]),'condicion':([43,44,72,],[53,60,76,]),'sentencia':([46,53,60,69,76,],[63,66,67,73,80,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Start","S'",1,None,None,None),
  ('Start -> code','Start',1,'p_Start','LexicalAnalizer.py',149),
  ('Start -> empty','Start',1,'p_Start','LexicalAnalizer.py',150),
  ('code -> INICIO DOSPUNTOS cuerpo FIN PUNTOCOMA procedimiento','code',6,'p_Code','LexicalAnalizer.py',157),
  ('procedimiento -> ID','procedimiento',1,'p_procedimiento','LexicalAnalizer.py',167),
  ('procedimiento -> empty','procedimiento',1,'p_procedimiento','LexicalAnalizer.py',168),
  ('variable -> sinini PUNTOCOMA cuerpo','variable',3,'p_Variable','LexicalAnalizer.py',176),
  ('variable -> ini PUNTOCOMA cuerpo','variable',3,'p_Variable','LexicalAnalizer.py',177),
  ('variable -> empty empty empty','variable',3,'p_Variable','LexicalAnalizer.py',178),
  ('cuerpo -> variable','cuerpo',1,'p_cuerpo','LexicalAnalizer.py',190),
  ('cuerpo -> expresion','cuerpo',1,'p_cuerpo','LexicalAnalizer.py',191),
  ('expresion -> condicion1 expresion','expresion',2,'p_expresion','LexicalAnalizer.py',199),
  ('expresion -> condicion2 expresion','expresion',2,'p_expresion','LexicalAnalizer.py',200),
  ('expresion -> repita expresion','expresion',2,'p_expresion','LexicalAnalizer.py',201),
  ('expresion -> hacer expresion','expresion',2,'p_expresion','LexicalAnalizer.py',202),
  ('expresion -> empty empty','expresion',2,'p_expresion','LexicalAnalizer.py',203),
  ('repita -> REPITA LLAVE_IZQ expresion LLAVE_DER HASTAENCONTRAR ID condicion sentencia PUNTOCOMA','repita',9,'p_repita','LexicalAnalizer.py',214),
  ('condicion2 -> ENCASO ID cond2Aux2 FINENCASO PUNTOCOMA','condicion2',5,'p_condicion2','LexicalAnalizer.py',221),
  ('cond2Aux2 -> CUANDO condicion sentencia ENTONS LLAVE_IZQ expresion LLAVE_DER SINO LLAVE_IZQ expresion LLAVE_DER','cond2Aux2',11,'p_cond2Aux','LexicalAnalizer.py',228),
  ('condicion1 -> ENCASO cond1Aux FINENCASO PUNTOCOMA','condicion1',4,'p_condicion1','LexicalAnalizer.py',236),
  ('cond1Aux -> CUANDO ID condicion sentencia ENTONS LLAVE_IZQ expresion LLAVE_DER SINO LLAVE_IZQ expresion LLAVE_DER','cond1Aux',12,'p_cond1Aux','LexicalAnalizer.py',243),
  ('hacer -> DESDE ID IGUAL sentencia HASTA sentencia HAGA LLAVE_IZQ expresion LLAVE_DER FINDESDE PUNTOCOMA','hacer',12,'p_hacer','LexicalAnalizer.py',250),
  ('condicion -> IGUAL','condicion',1,'p_condicion','LexicalAnalizer.py',256),
  ('condicion -> MAYOR','condicion',1,'p_condicion','LexicalAnalizer.py',257),
  ('condicion -> MENOR','condicion',1,'p_condicion','LexicalAnalizer.py',258),
  ('condicion -> DIFERENTE','condicion',1,'p_condicion','LexicalAnalizer.py',259),
  ('condicion -> MAYORIGUAL','condicion',1,'p_condicion','LexicalAnalizer.py',260),
  ('condicion -> MENORIGUAL','condicion',1,'p_condicion','LexicalAnalizer.py',261),
  ('sentencia -> ID','sentencia',1,'p_sentencia','LexicalAnalizer.py',269),
  ('sentencia -> NUMERO','sentencia',1,'p_sentencia','LexicalAnalizer.py',270),
  ('ini -> DCL ID IGUAL NUMERO','ini',4,'p_VariableIni','LexicalAnalizer.py',277),
  ('sinini -> DCL ID','sinini',2,'p_VariableNoIni','LexicalAnalizer.py',284),
  ('empty -> <empty>','empty',0,'p_empty','LexicalAnalizer.py',294),
]
